{"version":3,"sources":["logo.svg","listitem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","items","console","log","listItems","map","item","key","className","type","id","value","text","onChange","event","editItem","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleChange","bind","addItem","clear","this","setState","Date","now","preventDefault","filteredItems","filter","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,+MC2B5BC,MAtBf,SAAmBC,GACjB,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAI,SAAAC,GAE3B,OADAJ,QAAQC,IAAIG,EAAKC,KACV,yBAAKC,UAAU,OAAOD,IAAKD,EAAKC,KACnC,2BACA,2BAAOE,KAAK,OAAOC,GAAIJ,EAAKC,IAAKI,MAAOL,EAAKM,KAAMC,SAAW,SAACC,GAAD,OAAWd,EAAMe,SAASD,EAAME,OAAOL,MAAOL,EAAKC,QACjH,8BAAM,kBAAC,IAAD,CAAiBC,UAAU,SAASS,KAAK,QAAQC,QAAU,kBAAMlB,EAAMmB,WAAWb,EAAKM,eAInG,OACC,6BACC,kBAAC,IAAD,CAAUQ,SAAU,IAAKC,OAAO,eAC9BjB,K,eCdLkB,IAAQC,IAAIC,K,IAgFGC,E,kDA7Eb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CACXzB,MAAO,GACP0B,YAAc,CACZf,KAAM,GACNL,IAAK,KAGT,EAAKqB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,SAAW,EAAKA,SAASc,KAAd,gBAChB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBAbI,E,yDAeLf,GACZkB,KAAKC,SAAU,CACbN,YAAa,CACXf,KAAKE,EAAME,OAAOL,MAClBJ,IAAI2B,KAAKC,W,8BAINrB,GACPA,EAAMsB,iBACN,IAAM9B,EAAO0B,KAAKN,MAAMC,YACxBK,KAAKC,SAAS,CACZhC,MAAM,GAAD,mBAAM+B,KAAKN,MAAMzB,OAAjB,CAAwBK,IAC7BqB,YAAY,CACVf,KAAM,GACNL,IAAK,Q,iCAIAK,GACT,IAAMyB,EAAgBL,KAAKN,MAAMzB,MAAMqC,QAAO,SAAAhC,GAAI,OAAIA,EAAKM,OAASA,KACpEoB,KAAKC,SAAS,CACZhC,MAAOoC,M,+BAGFzB,EAAML,GACb,IAAMN,EAAQ+B,KAAKN,MAAMzB,MACzBA,EAAMI,KAAI,SAAAC,GACLA,EAAKC,MAAOA,IACbD,EAAKM,KAAOA,MAGhBoB,KAAKC,SAAS,CACVhC,MAAOA,M,8BAKX+B,KAAKC,SAAS,CACZhC,MAAM,O,+BAMR,OADFC,QAAQC,IAAI6B,KAAKN,MAAMC,YAAYpB,KAE/B,yBAAKC,UAAU,OACb,gCACE,0BAAME,GAAG,cACP,2BAAOD,KAAK,OAAO8B,YAAY,aAAa5B,MAAOqB,KAAKN,MAAMC,YAAYf,KAAMC,SAAUmB,KAAKJ,eAC/F,4BAAQnB,KAAK,SAASD,UAAU,YAAYU,QAASc,KAAKF,SAA1D,SAIJ,kBAAC,EAAD,CAAW7B,MAAO+B,KAAKN,MAAMzB,MAAOkB,WAAYa,KAAKb,WAAYJ,SAAUiB,KAAKjB,WAChF,4BAAQN,KAAK,SAASD,UAAU,cAAcU,QAASc,KAAKD,OAA5D,c,GAvEUS,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.1e3fd05a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport './listitem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction ListItems(props) {\r\n\t\tconst items = props.items;\r\n\t\tconsole.log(items);\r\n\t\tconst listItems = items.map(item => {\r\n\t\t\tconsole.log(item.key);\r\n\t\t\treturn <div className=\"list\" key={item.key}>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t<input type=\"text\" id={item.key} value={item.text} onChange= {(event) => props.editItem(event.target.value, item.key)}/>\r\n\t\t\t\t\t\t\t<span><FontAwesomeIcon className=\"faicon\" icon=\"trash\" onClick= {() => props.deleteItem(item.text)} />\r\n\t\t\t\t\t\t\t</span></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t <FlipMove duration={300} easing=\"ease-in-out\">\r\n\t\t \t{listItems}\r\n\t\t </FlipMove>\r\n\t\t</div>\r\n\t\t \r\n\t);\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './listitem.js';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem : {\n        text: '',\n        key: ''\n      }\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.editItem = this.editItem.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n  handleChange (event) {\n    this.setState ({\n      currentItem: {\n        text:event.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItem (event) {\n    event.preventDefault();\n    const item = this.state.currentItem;\n    this.setState({\n      items: [...this.state.items, item],\n      currentItem:{\n        text: '',\n        key: ''\n      }\n    })\n  }\n  deleteItem(text) {\n    const filteredItems = this.state.items.filter(item => item.text !== text);\n    this.setState({\n      items: filteredItems\n    })\n  }\n  editItem(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key ===key){\n        item.text = text\n      }\n    })\n    this.setState({\n        items: items\n      })\n    \n  }\n  clear(){\n    this.setState({\n      items:[]\n    })\n  }\n  render() {\n    \n  console.log(this.state.currentItem.key);\n    return(\n      <div className=\"app\">\n        <header>\n          <form id=\"to-do-form\">\n            <input type=\"text\" placeholder=\"Enter text\" value={this.state.currentItem.text} onChange={this.handleChange}/>\n            <button type=\"submit\" className=\"addButton\" onClick={this.addItem}>Add</button>\n          </form>\n        </header>\n        \n        <ListItems items={this.state.items} deleteItem={this.deleteItem} editItem={this.editItem} />\n        <button type=\"button\" className=\"clearButton\" onClick={this.clear}>Clear</button>\n      </div>\n      ); \n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}